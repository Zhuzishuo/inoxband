---
const { imgs, width, height, style } = Astro.props;
---

<astro-carousel data-imgs={imgs} data-width={width} data-height={height} style={style}>
    <div class="carousel">
        <div class="container">

        </div>
        <div class="bottom">

        </div>
    </div>
</astro-carousel>

<style>
    .carousel {
        width: 100%;
        height: 100%;
        border-radius: 6px;
        overflow: hidden;
        position: relative;
    }

    .carousel .container {
        max-width: 100%;
        width: 100%;
        height: 100%;
        position: relative;
        left: 0;
        display: flex;

        /* 过渡动画 1s */
        transition: all 1s;
    }

    .carousel .container a {
        max-width: 100%;
        width: 100%;
        height: 100%;
        flex-shrink: 0;
    }
    .carousel .container a img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .carousel .bottom {
        position: absolute;

        /* 绝对定位水平居中 */
        left: 0;
        right: 0;
        margin: 0 auto;
        bottom: 24px;

        /* 宽度等同于内容宽度 */
        width: max-content;

        display: flex;
        /* 指示器间距 */
        gap: 10px;
    }

    .carousel .bottom .indicator {
        height: 4px;
        border-radius: 2px;

        background-color: black;

        cursor: pointer;
    }
    .carousel:hover .bottom .indicator {
        opacity: 1;
    }
</style>

<script>
    class AstroCarousel extends HTMLElement {
        constructor() {
            super();
            
            // 轮播图尺寸
            const width = this.dataset.width;
            const height = this.dataset.height;
            const carousel = document.querySelector('.carousel') as HTMLElement;
            if (width !== null && width !== undefined) {
                carousel.style.width = width;
            }
            if (height !== null && height !== undefined) {
                carousel.style.height = height;
            }

            // 图片信息
            const data = this.dataset.imgs;
            const imgs = data !== null && data !== undefined ? JSON.parse(data) : undefined;
            // 轮播图盒子
            const container = document.querySelector('.container');
            // 底部按钮盒子
            const bottom = document.querySelector(".carousel .bottom")
            if (imgs !== null && imgs !== undefined 
                && container !== null && container !== undefined
                && bottom !== null && bottom !== undefined) {
                for (let index = 0; index < imgs.length; index++) {
                    let element = imgs[index];
                    // 图片跳转链接
                    let href = element["href"];
                    // 图片链接
                    let src = element["src"];
                    if (href !== null && href !== undefined && src !== null && src !== undefined) {
                        const a = createANode(href);
                        a.setAttribute("target", "_blank");
                        const img = createImageNode(src, carousel);
                        a.appendChild(img);
                        container.appendChild(a);
                    }

                    // 创建底部按钮
                    const indicator = createIndicatorNode(index);
                    bottom.appendChild(indicator);
                }
            }
        }
    }

    function createANode(href) {
        const a = document.createElement('a');
        a.setAttribute("href", href);
        return a;
    }

    function createImageNode(src, carousel) {
        const img = document.createElement("img");
        img.src = src;

        // 处理图片长宽，适配轮播图盒子长宽
        AutoResizeImage(carousel.offsetWidth, carousel.offsetHeight, img);
        return img;
    }

    function AutoResizeImage(maxWidth, maxHeight, objImg) {
        var img = new Image();
        img.src = objImg.src;
        var Ratio = 1;
        var w = img.width; //图片实际宽度
        var h = img.height; //图片实际长度
        let wRatio = maxWidth / w; //宽度缩放比
        let hRatio = maxHeight / h; //长度缩放比
        if (maxWidth == 0 && maxHeight == 0) {
            Ratio = 1;
        } else if (maxWidth == 0) {
            if (hRatio < 1) Ratio = hRatio;
        } else if (maxHeight == 0) {
            if (wRatio < 1) Ratio = wRatio;
        } else if (wRatio < 1 || hRatio < 1) {
            Ratio = (wRatio <= hRatio ? wRatio : hRatio);
            if (wRatio < hRatio) {
                objImg.style.marginTop = (maxHeight - h * Ratio) / 2 + "px"; //使图片垂直居中
            } else {
                objImg.style.marginLeft = (maxWidth - w * Ratio) / 2 + "px"; //使图片水平居中
            }
        } else {
            objImg.style.marginTop = (maxHeight - h) / 2 + "px";
            objImg.style.marginLeft = (maxWidth - w) / 2 + "px";
        }
        if (Ratio < 1) {
            w = w * Ratio; 
            h = h * Ratio;
        }
        objImg.height = h; objImg.width = w;
    }

    function createIndicatorNode(index) {
        const indicator = document.createElement("div");
        indicator.classList.add("indicator");
        indicator.classList.add("indicator-" + index);
        indicator.addEventListener('click', () => setIndex(index));
        return indicator;
    }

    // 当前显示图片下标
    let index = 0;
    function createAuto() {
        return setInterval(() => {
            index++;
            refresh();
        }, 3000)
    }

    // 自动滚动
    let autoTimer = createAuto();

    let setIndex = function (idx) {
        index = idx;
        refresh();

        // 重置自动滚动
        clearInterval(autoTimer);
        autoTimer = createAuto();
    }
    
    function refresh() {
        // 图片的数量
        let imageCount = document.querySelectorAll(".carousel .container img").length;
        if (index < 0) {
            // 下标小于 0 时
            // 设置最右的图片
            index = imageCount - 1;
        } else if (index >= imageCount) {
            // 下标超过上限时
            // 设置最左的图片
            index = 0;
        }

        let carousel = document.querySelector(".carousel");
        if (carousel !== null && carousel !== undefined) {
            //获取轮播框的宽度
            let widthStr = getComputedStyle(carousel).width;
            let width = Number(widthStr.slice(0, -2));

            let container = carousel.querySelector(".container") as HTMLElement;
            if (container !== null && container !== undefined) {
                container.style.left = index * width * -1 + "px";
            }

            for (let iIndex = 0; iIndex < imageCount; iIndex++) {
                let bottom = carousel.querySelector(".indicator-" + iIndex) as HTMLElement;
                if (bottom !== null && bottom !== undefined) {
                    if (index === iIndex) {
                        bottom.style.width = "36px";
                        bottom.style.opacity = "1";
                    } else {
                        bottom.style.width = "21px";
                        bottom.style.opacity = "0.3";
                    }
                }
            }
        }
    }

    customElements.define('astro-carousel', AstroCarousel);
</script>